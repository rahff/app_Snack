{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/shared/services/order.service.ts","./src/app/shared/services/product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Order } from '../models/order';\nimport { Response } from '../models/response.model';\nimport { map, tap } from 'rxjs/operators';\nimport { UserService } from './user.service';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n\n  private api = environment.API;\n  public order: Order;\n  public orderList: Order[];\n  public orderList$ = new Subject();\n  constructor(private http: HttpClient,\n              private userService: UserService) { }\n\n  createOrder(order: Order): Promise<boolean> {\n    return new Promise((resolve, reject)=>{\n      console.log(\"inCreateOderServive\");\n      \n      this.http.post(this.api + 'orders/new',order).subscribe((response: Response)=>{\n        if(response.status === 200){\n          const user: User = {\n            confirm: response.result.confirm,\n            email: response.result.local.email,\n            _id: response.result._id,\n            adress: response.result.adress,\n            commandes: response.result.commandes,\n            firstname: response.result.firstname,\n            name: response.result.name,\n            role: response.result.role\n          }\n          this.userService.currentUser$.next(user)\n          resolve(true);\n        }else{\n          reject('erreur lors de l\\'enregistrement de la commande');\n        }\n      });\n    });\n  }\n  getOrderList(): Observable<any> {\n      return this.http.get<any>(this.api + 'orders/list').pipe(\n        map((response:any)=>{\n            return response.result\n        }));\n  }\n  deleteOrder(id: string): Promise<string> {\n    return new Promise((resolve, reject)=>{\n      this.http.delete(this.api + 'orders/delete/' + id).subscribe(\n        (response: Response) =>{\n          if(response.status === 200){\n            this.getOrderList();\n            resolve(response.message);\n          }else{\n            reject(response.message);\n          }\n        })\n    })\n  }\n  emitOrder(): void {\n    this.orderList$.next(this.orderList);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Product } from '../models/product';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Response } from '../models/response.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  private productList: Product[];\n  public product$ = new BehaviorSubject<Product[]>([]);\n  private api = environment.API;\n  constructor(private http: HttpClient) {\n    this.getProductList();\n  }\n\n\n  getProductList(): void {\n     this.http.get<Response>(this.api + 'products').subscribe(\n      (response: Response) => {\n        this.productList = response.result;\n        this.emitProduct();\n      });\n}\n  emitProduct(): void {\n    this.product$.next(this.productList);\n  }\n  addProduct(body: Product, file: File): Promise<string> {\n    return new Promise((resolve, reject)=>{\n      let productData = new FormData();\n      productData.append('product', JSON.stringify(body));\n      productData.append('image',file);\n      this.http.post(this.api+'products/add',productData).subscribe((response: Response) =>{\n        if(response.status === 200){\n          resolve(response.message);\n        }else{\n          reject(response.message);\n        }\n      })\n    })\n  }\n  getProductById(id: string): Observable<Response> {\n    return this.http.get<Response>(this.api + \"products/\" + id);\n  }\n  updateProduct(body: Product, id: string, file?:File): Promise<string> {\n    return new Promise((resolve, reject) =>{\n      const formData = new FormData();\n      formData.append(\"product\",JSON.stringify(body));\n      if(file){\n        formData.append(\"image\",file)\n      }\n      this.http.patch(this.api+ 'products/update/'+ id,formData).subscribe(\n        (response: Response)=>{\n            if(response.status === 200){\n              resolve(response.message);\n            }else{\n              reject(response.message)\n            }\n        })\n    })\n  }\n  deleteProduct(id: string): Promise<string> {\n    return new Promise((resolve, reject)=>{\n      this.http.delete(this.api + \"products/\"+id).subscribe((response: Response) =>{\n        if(response.status === 200){\n          resolve(response.message);\n        }else{\n          reject(response.message);\n        }\n      })\n    })\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}